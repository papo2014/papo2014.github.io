<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Gilde对象是如何被创建的]]></title>
    <url>%2F2019%2F08%2F08%2Fgilde%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[首先从glide的使用方式来一步一步分析glide的源码，如下： 12345Glide.with(myFragment) .load(url) .centerCrop() .placeholder(R.drawable.loading_spinner) .into(myImageView); 从Glide类的with方法开始分析，来了解Glide对象是如何被创建的，with方法有几个重载方法，分别可以传入Context、Activity、FragmentActivity、android.support.v4.app.Fragment、android.app.Fragment、View，它们最终会调用如下方法： 12345678910111213141516171819202122232425262728 @NonNullprivate static RequestManagerRetriever getRetriever(@Nullable Context context) &#123; // Context could be null for other reasons (ie the user passes in null), but in practice it will // only occur due to errors with the Fragment lifecycle. Preconditions.checkNotNull( context, "You cannot start a load on a not yet attached View or a Fragment where getActivity() " + "returns null (which usually occurs when getActivity() is called before the Fragment " + "is attached or after the Fragment is destroyed)."); return Glide.get(context).getRequestManagerRetriever();&#125;============================================================================ /** * Get the singleton. * @return the singleton */ @NonNull public static Glide get(@NonNull Context context) &#123; if (glide == null) &#123; synchronized (Glide.class) &#123; if (glide == null) &#123; checkAndInitializeGlide(context); &#125; &#125; &#125; return glide; &#125; 从上述代码可以看出get方法对Gilde初始化了，创建了一个单例。更详细的在initializeGlide这个方法里面，这个方法是创建glide对象的核心方法，从这个方法里可以看出，注解和manifest的配置可以扩展Glide的功能。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354private static void initializeGlide(@NonNull Context context, @NonNull GlideBuilder builder) &#123; Context applicationContext = context.getApplicationContext(); //如果没有使用到glide的注解来增加配置项，这里回空 GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules(); List&lt;com.bumptech.glide.module.GlideModule&gt; manifestModules = Collections.emptyList(); if (annotationGeneratedModule == null || annotationGeneratedModule.isManifestParsingEnabled()) &#123; //minifest没有配置的话，这里也是空 manifestModules = new ManifestParser(applicationContext).parse(); &#125; if (annotationGeneratedModule != null &amp;&amp; !annotationGeneratedModule.getExcludedModuleClasses().isEmpty()) &#123; Set&lt;Class&lt;?&gt;&gt; excludedModuleClasses = annotationGeneratedModule.getExcludedModuleClasses(); Iterator&lt;com.bumptech.glide.module.GlideModule&gt; iterator = manifestModules.iterator(); while (iterator.hasNext()) &#123; com.bumptech.glide.module.GlideModule current = iterator.next(); if (!excludedModuleClasses.contains(current.getClass())) &#123; continue; &#125; if (Log.isLoggable(TAG, Log.DEBUG)) &#123; Log.d(TAG, "AppGlideModule excludes manifest GlideModule: " + current); &#125; iterator.remove(); &#125; &#125; if (Log.isLoggable(TAG, Log.DEBUG)) &#123; for (com.bumptech.glide.module.GlideModule glideModule : manifestModules) &#123; Log.d(TAG, "Discovered GlideModule from manifest: " + glideModule.getClass()); &#125; &#125; RequestManagerRetriever.RequestManagerFactory factory = annotationGeneratedModule != null ? annotationGeneratedModule.getRequestManagerFactory() : null; builder.setRequestManagerFactory(factory); for (com.bumptech.glide.module.GlideModule module : manifestModules) &#123; module.applyOptions(applicationContext, builder); &#125; if (annotationGeneratedModule != null) &#123; annotationGeneratedModule.applyOptions(applicationContext, builder); &#125; //真正创建glide对象在这里 Glide glide = builder.build(applicationContext); for (com.bumptech.glide.module.GlideModule module : manifestModules) &#123; module.registerComponents(applicationContext, glide, glide.registry); &#125; if (annotationGeneratedModule != null) &#123; annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry); &#125; applicationContext.registerComponentCallbacks(glide); Glide.glide = glide; &#125; 然后在GlideBuilder里面build出一个glide对象： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576Glide build(@NonNull Context context) &#123; if (sourceExecutor == null) &#123; sourceExecutor = GlideExecutor.newSourceExecutor(); &#125; if (diskCacheExecutor == null) &#123; diskCacheExecutor = GlideExecutor.newDiskCacheExecutor(); &#125; if (animationExecutor == null) &#123; animationExecutor = GlideExecutor.newAnimationExecutor(); &#125; if (memorySizeCalculator == null) &#123; memorySizeCalculator = new MemorySizeCalculator.Builder(context).build(); &#125; if (connectivityMonitorFactory == null) &#123; connectivityMonitorFactory = new DefaultConnectivityMonitorFactory(); &#125; if (bitmapPool == null) &#123; int size = memorySizeCalculator.getBitmapPoolSize(); if (size &gt; 0) &#123; bitmapPool = new LruBitmapPool(size); &#125; else &#123; bitmapPool = new BitmapPoolAdapter(); &#125; &#125; if (arrayPool == null) &#123; arrayPool = new LruArrayPool(memorySizeCalculator.getArrayPoolSizeInBytes()); &#125; if (memoryCache == null) &#123; memoryCache = new LruResourceCache(memorySizeCalculator.getMemoryCacheSize()); &#125; if (diskCacheFactory == null) &#123; diskCacheFactory = new InternalCacheDiskCacheFactory(context); &#125; if (engine == null) &#123; engine = new Engine( memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, GlideExecutor.newUnlimitedSourceExecutor(), GlideExecutor.newAnimationExecutor(), isActiveResourceRetentionAllowed); &#125; if (defaultRequestListeners == null) &#123; defaultRequestListeners = Collections.emptyList(); &#125; else &#123; defaultRequestListeners = Collections.unmodifiableList(defaultRequestListeners); &#125; RequestManagerRetriever requestManagerRetriever = new RequestManagerRetriever(requestManagerFactory); return new Glide( context, engine, memoryCache, bitmapPool, arrayPool, requestManagerRetriever, connectivityMonitorFactory, logLevel, defaultRequestOptions.lock(), defaultTransitionOptions, defaultRequestListeners, isLoggingRequestOriginsEnabled); &#125; 英语单词： thumbnails：n 拇指甲;索引图像;(打印预览)略图; retrieved：v 取回;索回;检索数据;扭转颓势;挽回;找回 vein: n 静脉;叶脉;翅脉;纹理;纹路;条纹; variants: n 变种;变体;变形; migrated：v (随季节变化)迁徙;移居;迁移;移动;转移; 思考： 1、注解与注解生成器 2、glide如何新增配置项和自定义模块 3、Collections.emptyList 4、ComponentCallbacks与ComponentCallbacks2]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Glide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
